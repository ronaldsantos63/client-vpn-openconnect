# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v3
      with:
        python-version: "3.7"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install && pipenv install --dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pipenv run pytest -vv
        pipenv run pytest --cov-config=.coveragerc --cov=.
    - name: Generate coverage
      uses: tj-actions/coverage-badge-py@v1.8
    - name: Verify Changed files
      uses: tj-actions/verify-changed-files@v9
      id: changed_files
      with:
        files: coverage.svg
    - name: Commit files
      if: steps.changed_files.outputs.files_changed == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add coverage.svg
        git commit -m "Updated coverage.svg"
    - name: Push changes
      if: steps.changed_files.outputs.files_changed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.token }}
        branch: ${{ github.ref }}
    - name: Build
      run: |
        # Run pyinstaller
        ./setup.sh
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
          name: client_vpn
          path: dist/
          if-no-files-found: error
        
